/*
 *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

buildscript {
    ext {
        es_group = "org.elasticsearch"
        es_version = '7.10.2'
        opendistroVersion = '1.13.0'
        kotlin_version = System.getProperty("kotlin.version", "1.4.32")
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath "${es_group}.gradle:build-tools:${es_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.16.0"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.diffplug.gradle.spotless" version "3.26.1"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    jcenter()
}

group 'com.amazon.opendistroforelasticsearch.commons'

sourceCompatibility = 1.8

version = "${opendistroVersion}.0"

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.plugin.allopen'

configurations {
    ktlint
}

dependencies {
    compileOnly "org.elasticsearch.client:elasticsearch-rest-high-level-client:${es_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
    testCompile "org.elasticsearch.test:framework:${es_version}"
    // testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    testCompile "org.mockito:mockito-core:2.23.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.9.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'

    ktlint "com.pinterest:ktlint:0.41.0"
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed" // "started"
        showStandardStreams true
    }
}

spotless {
    java {
        removeUnusedImports()
        importOrder 'java', 'javax', 'org', 'com'
        licenseHeaderFile 'spotless.license.java'

        eclipse().configFile rootProject.file('.eclipseformat.xml')
    }
}

shadowJar {
    classifier = null
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

detekt {
    config = files("detekt.yml")
    buildUponDefaultConfig = true
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

publishing {
    publications {
        shadow(MavenPublication) {
            project.shadow.component(it)
            groupId = 'com.amazon.opendistroforelasticsearch'
            artifactId = 'common-utils'

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Open Distro for Elasticsearch Common Utils"
                packaging = "jar"
                url = "https://github.com/opendistro-for-elasticsearch/common-utils"
                description = "Open Distro for Elasticsearch Common Utils"
                scm {
                    connection = "scm:git@github.com:opendistro-for-elasticsearch/common-utils.git"
                    developerConnection = "scm:git@github.com:opendistro-for-elasticsearch/common-utils.git"
                    url = "git@github.com:opendistro-for-elasticsearch/common-utils.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "amazonwebservices"
                        organization = "Amazon Web Services"
                        organizationUrl = "https://aws.amazon.com"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype-staging"
            url "https://aws.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
                password project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
            }
        }
    }

    gradle.startParameter.setShowStacktrace(ShowStacktrace.ALWAYS)
    gradle.startParameter.setLogLevel(LogLevel.DEBUG)

    signing {
        required { gradle.taskGraph.hasTask("publishShadowPublicationToSonatype-stagingRepository") }
        sign publishing.publications.shadow
    }
}
